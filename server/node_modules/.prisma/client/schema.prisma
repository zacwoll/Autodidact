// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// This is where I'm going to start defining the models.
model User {
    id  String  @id @default(uuid())
    username String
    email  String  @unique
    updatedAt DateTime @default(now())
    createdAt  DateTime  @default(now())
    subjects  Subject[]
}

model Subject {
    id  String  @unique @default(uuid())
    title  String
    author  User  @relation(fields: [authorId], references: [id])
    authorId  String
    @@id([title, authorId], name: "subjectId")

    updatedAt  DateTime  @default(now())
    createdAt  DateTime  @default(now())

    Practices Practice[]
    Websites Website[]
    Notes Note[]
    Goals Goal[]
    Reflections Reflection[]
}

model Practice {
    // Generate for every practice item
    id  String  @unique @default(uuid()) // maybe bigger / maybe uuid

    // instantiate DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now())

    // create relation to Subject
    subject  Subject  @relation(fields: [subjectId], references: [id])
    subjectId  String

    // create fields for data
    quantity  Int?
    description  String  @default("")

    // generate composite id
    @@id([subjectId, id], name: "practiceId")
}

model Website {
    // Generate for every website item
    id  Int  @default(autoincrement()) // maybe bigger / maybe uuid

    // instantiate DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now())

    // create relation to Subject
    subject  Subject  @relation(fields: [subjectId], references: [id])
    subjectId  String

    // create fields for data
    url  String  @unique
    summary  String  @default("")

    // generate composite id
    @@id([subjectId, id], name: "websiteId")
}

model Note {
    // Generate for every practice item
    id  Int  @default(autoincrement()) // maybe bigger / maybe uuid

    // instantiate DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now())

    // create relation to Subject
    subject  Subject  @relation(fields: [subjectId], references: [id])
    subjectId  String

    // create fields for data
    content  String  @default("")
    title  String  @unique @default("")

    // generate composite id
    @@id([subjectId, id], name: "noteId")
}

model Goal {
    // Generate for every goal item
    id  Int  @default(autoincrement()) // maybe bigger / maybe uuid

    // instantiate DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now())

    // create relation to Subject
    subject  Subject  @relation(fields: [subjectId], references: [id])
    subjectId  String

    // create fields for data
    title  String  @unique
    estimatedCompletion  DateTime
    description  String  @default("")

    // generate composite id
    @@id([subjectId, id], name: "goalId")
}

model Reflection {
    // Generate for every practice item
    id  Int  @default(autoincrement()) // maybe bigger / maybe uuid

    // instantiate DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now())

    // create relation to Subject
    subject  Subject  @relation(fields: [subjectId], references: [id])
    subjectId  String

    // create fields for data
    title  String  @unique
    content  String  @default("")

    // generate composite id

    @@id([subjectId, id], name: "reflectionId")
}