
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  username: string
  email: string
  updatedAt: Date
  createdAt: Date
}

/**
 * Model Subject
 * 
 */
export type Subject = {
  id: string
  title: string
  authorId: string
  updatedAt: Date
  createdAt: Date
}

/**
 * Model Practice
 * 
 */
export type Practice = {
  id: string
  createdAt: Date
  updatedAt: Date
  subjectId: string
  quantity: number | null
  description: string
}

/**
 * Model Website
 * 
 */
export type Website = {
  id: number
  createdAt: Date
  updatedAt: Date
  subjectId: string
  url: string
  summary: string
}

/**
 * Model Note
 * 
 */
export type Note = {
  id: number
  createdAt: Date
  updatedAt: Date
  subjectId: string
  content: string
  title: string
}

/**
 * Model Goal
 * 
 */
export type Goal = {
  id: number
  createdAt: Date
  updatedAt: Date
  subjectId: string
  title: string
  estimatedCompletion: Date
  description: string
}

/**
 * Model Reflection
 * 
 */
export type Reflection = {
  id: number
  createdAt: Date
  updatedAt: Date
  subjectId: string
  title: string
  content: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<GlobalReject>;

  /**
   * `prisma.practice`: Exposes CRUD operations for the **Practice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Practices
    * const practices = await prisma.practice.findMany()
    * ```
    */
  get practice(): Prisma.PracticeDelegate<GlobalReject>;

  /**
   * `prisma.website`: Exposes CRUD operations for the **Website** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Websites
    * const websites = await prisma.website.findMany()
    * ```
    */
  get website(): Prisma.WebsiteDelegate<GlobalReject>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<GlobalReject>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<GlobalReject>;

  /**
   * `prisma.reflection`: Exposes CRUD operations for the **Reflection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reflections
    * const reflections = await prisma.reflection.findMany()
    * ```
    */
  get reflection(): Prisma.ReflectionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Subject: 'Subject',
    Practice: 'Practice',
    Website: 'Website',
    Note: 'Note',
    Goal: 'Goal',
    Reflection: 'Reflection'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    subjects: number
  }

  export type UserCountOutputTypeSelect = {
    subjects?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type SubjectCountOutputType
   */


  export type SubjectCountOutputType = {
    Practices: number
    Websites: number
    Notes: number
    Goals: number
    Reflections: number
  }

  export type SubjectCountOutputTypeSelect = {
    Practices?: boolean
    Websites?: boolean
    Notes?: boolean
    Goals?: boolean
    Reflections?: boolean
  }

  export type SubjectCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SubjectCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SubjectCountOutputType
    : S extends undefined
    ? never
    : S extends SubjectCountOutputTypeArgs
    ?'include' extends U
    ? SubjectCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SubjectCountOutputType ?SubjectCountOutputType [P]
  : 
     never
  } 
    : SubjectCountOutputType
  : SubjectCountOutputType




  // Custom InputTypes

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     * 
    **/
    select?: SubjectCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    updatedAt?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    updatedAt?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    updatedAt: Date
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    subjects?: boolean | SubjectFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    subjects?: boolean | SubjectFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subjects'
        ? Array < SubjectGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'subjects'
        ? Array < SubjectGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subjects<T extends SubjectFindManyArgs = {}>(args?: Subset<T, SubjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Subject>>, PrismaPromise<Array<SubjectGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Subject
   */


  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectMinAggregateOutputType = {
    id: string | null
    title: string | null
    authorId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: string | null
    title: string | null
    authorId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    title: number
    authorId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type SubjectMinAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs = {
    /**
     * Filter which Subject to aggregate.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs = {
    where?: SubjectWhereInput
    orderBy?: Enumerable<SubjectOrderByWithAggregationInput>
    by: Array<SubjectScalarFieldEnum>
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }


  export type SubjectGroupByOutputType = {
    id: string
    title: string
    authorId: string
    updatedAt: Date
    createdAt: Date
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Promise<
    Array<
      PickArray<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect = {
    id?: boolean
    title?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    Practices?: boolean | PracticeFindManyArgs
    Websites?: boolean | WebsiteFindManyArgs
    Notes?: boolean | NoteFindManyArgs
    Goals?: boolean | GoalFindManyArgs
    Reflections?: boolean | ReflectionFindManyArgs
    _count?: boolean | SubjectCountOutputTypeArgs
  }

  export type SubjectInclude = {
    author?: boolean | UserArgs
    Practices?: boolean | PracticeFindManyArgs
    Websites?: boolean | WebsiteFindManyArgs
    Notes?: boolean | NoteFindManyArgs
    Goals?: boolean | GoalFindManyArgs
    Reflections?: boolean | ReflectionFindManyArgs
    _count?: boolean | SubjectCountOutputTypeArgs
  }

  export type SubjectGetPayload<
    S extends boolean | null | undefined | SubjectArgs,
    U = keyof S
      > = S extends true
        ? Subject
    : S extends undefined
    ? never
    : S extends SubjectArgs | SubjectFindManyArgs
    ?'include' extends U
    ? Subject  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Practices'
        ? Array < PracticeGetPayload<S['include'][P]>>  :
        P extends 'Websites'
        ? Array < WebsiteGetPayload<S['include'][P]>>  :
        P extends 'Notes'
        ? Array < NoteGetPayload<S['include'][P]>>  :
        P extends 'Goals'
        ? Array < GoalGetPayload<S['include'][P]>>  :
        P extends 'Reflections'
        ? Array < ReflectionGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? SubjectCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Subject ?Subject [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Practices'
        ? Array < PracticeGetPayload<S['select'][P]>>  :
        P extends 'Websites'
        ? Array < WebsiteGetPayload<S['select'][P]>>  :
        P extends 'Notes'
        ? Array < NoteGetPayload<S['select'][P]>>  :
        P extends 'Goals'
        ? Array < GoalGetPayload<S['select'][P]>>  :
        P extends 'Reflections'
        ? Array < ReflectionGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? SubjectCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Subject
  : Subject


  type SubjectCountArgs = Merge<
    Omit<SubjectFindManyArgs, 'select' | 'include'> & {
      select?: SubjectCountAggregateInputType | true
    }
  >

  export interface SubjectDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Subject'> extends True ? CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>> : CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Subject'> extends True ? CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>> : CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs>(
      args?: SelectSubset<T, SubjectFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Subject>>, PrismaPromise<Array<SubjectGetPayload<T>>>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs>(
      args: SelectSubset<T, SubjectCreateArgs>
    ): CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs>(
      args?: SelectSubset<T, SubjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs>(
      args: SelectSubset<T, SubjectDeleteArgs>
    ): CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs>(
      args: SelectSubset<T, SubjectUpdateArgs>
    ): CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs>(
      args?: SelectSubset<T, SubjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs>(
      args: SelectSubset<T, SubjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs>(
      args: SelectSubset<T, SubjectUpsertArgs>
    ): CheckSelect<T, Prisma__SubjectClient<Subject>, Prisma__SubjectClient<SubjectGetPayload<T>>>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubjectClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Practices<T extends PracticeFindManyArgs = {}>(args?: Subset<T, PracticeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Practice>>, PrismaPromise<Array<PracticeGetPayload<T>>>>;

    Websites<T extends WebsiteFindManyArgs = {}>(args?: Subset<T, WebsiteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Website>>, PrismaPromise<Array<WebsiteGetPayload<T>>>>;

    Notes<T extends NoteFindManyArgs = {}>(args?: Subset<T, NoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Note>>, PrismaPromise<Array<NoteGetPayload<T>>>>;

    Goals<T extends GoalFindManyArgs = {}>(args?: Subset<T, GoalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Goal>>, PrismaPromise<Array<GoalGetPayload<T>>>>;

    Reflections<T extends ReflectionFindManyArgs = {}>(args?: Subset<T, ReflectionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reflection>>, PrismaPromise<Array<ReflectionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Throw an Error if a Subject can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Throw an Error if a Subject can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     * 
    **/
    distinct?: Enumerable<SubjectScalarFieldEnum>
  }


  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subjects to fetch.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SubjectScalarFieldEnum>
  }


  /**
   * Subject create
   */
  export type SubjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The data needed to create a Subject.
     * 
    **/
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }


  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs = {
    data: Enumerable<SubjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Subject update
   */
  export type SubjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The data needed to update a Subject.
     * 
    **/
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs = {
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    where?: SubjectWhereInput
  }


  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The filter to search for the Subject to update in case it exists.
     * 
    **/
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     * 
    **/
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }


  /**
   * Subject delete
   */
  export type SubjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter which Subject to delete.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs = {
    where?: SubjectWhereInput
  }


  /**
   * Subject without action
   */
  export type SubjectArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
  }



  /**
   * Model Practice
   */


  export type AggregatePractice = {
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  export type PracticeAvgAggregateOutputType = {
    quantity: number | null
  }

  export type PracticeSumAggregateOutputType = {
    quantity: number | null
  }

  export type PracticeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    quantity: number | null
    description: string | null
  }

  export type PracticeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    quantity: number | null
    description: string | null
  }

  export type PracticeCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subjectId: number
    quantity: number
    description: number
    _all: number
  }


  export type PracticeAvgAggregateInputType = {
    quantity?: true
  }

  export type PracticeSumAggregateInputType = {
    quantity?: true
  }

  export type PracticeMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    quantity?: true
    description?: true
  }

  export type PracticeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    quantity?: true
    description?: true
  }

  export type PracticeCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    quantity?: true
    description?: true
    _all?: true
  }

  export type PracticeAggregateArgs = {
    /**
     * Filter which Practice to aggregate.
     * 
    **/
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     * 
    **/
    orderBy?: Enumerable<PracticeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Practices
    **/
    _count?: true | PracticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeMaxAggregateInputType
  }

  export type GetPracticeAggregateType<T extends PracticeAggregateArgs> = {
        [P in keyof T & keyof AggregatePractice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePractice[P]>
      : GetScalarType<T[P], AggregatePractice[P]>
  }




  export type PracticeGroupByArgs = {
    where?: PracticeWhereInput
    orderBy?: Enumerable<PracticeOrderByWithAggregationInput>
    by: Array<PracticeScalarFieldEnum>
    having?: PracticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeCountAggregateInputType | true
    _avg?: PracticeAvgAggregateInputType
    _sum?: PracticeSumAggregateInputType
    _min?: PracticeMinAggregateInputType
    _max?: PracticeMaxAggregateInputType
  }


  export type PracticeGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    subjectId: string
    quantity: number | null
    description: string
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  type GetPracticeGroupByPayload<T extends PracticeGroupByArgs> = Promise<
    Array<
      PickArray<PracticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeGroupByOutputType[P]>
        }
      >
    >


  export type PracticeSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    quantity?: boolean
    description?: boolean
  }

  export type PracticeInclude = {
    subject?: boolean | SubjectArgs
  }

  export type PracticeGetPayload<
    S extends boolean | null | undefined | PracticeArgs,
    U = keyof S
      > = S extends true
        ? Practice
    : S extends undefined
    ? never
    : S extends PracticeArgs | PracticeFindManyArgs
    ?'include' extends U
    ? Practice  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subject'
        ? SubjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Practice ?Practice [P]
  : 
          P extends 'subject'
        ? SubjectGetPayload<S['select'][P]> : never
  } 
    : Practice
  : Practice


  type PracticeCountArgs = Merge<
    Omit<PracticeFindManyArgs, 'select' | 'include'> & {
      select?: PracticeCountAggregateInputType | true
    }
  >

  export interface PracticeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Practice that matches the filter.
     * @param {PracticeFindUniqueArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PracticeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PracticeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Practice'> extends True ? CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>> : CheckSelect<T, Prisma__PracticeClient<Practice | null >, Prisma__PracticeClient<PracticeGetPayload<T> | null >>

    /**
     * Find the first Practice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PracticeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PracticeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Practice'> extends True ? CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>> : CheckSelect<T, Prisma__PracticeClient<Practice | null >, Prisma__PracticeClient<PracticeGetPayload<T> | null >>

    /**
     * Find zero or more Practices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Practices
     * const practices = await prisma.practice.findMany()
     * 
     * // Get first 10 Practices
     * const practices = await prisma.practice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceWithIdOnly = await prisma.practice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PracticeFindManyArgs>(
      args?: SelectSubset<T, PracticeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Practice>>, PrismaPromise<Array<PracticeGetPayload<T>>>>

    /**
     * Create a Practice.
     * @param {PracticeCreateArgs} args - Arguments to create a Practice.
     * @example
     * // Create one Practice
     * const Practice = await prisma.practice.create({
     *   data: {
     *     // ... data to create a Practice
     *   }
     * })
     * 
    **/
    create<T extends PracticeCreateArgs>(
      args: SelectSubset<T, PracticeCreateArgs>
    ): CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>>

    /**
     * Create many Practices.
     *     @param {PracticeCreateManyArgs} args - Arguments to create many Practices.
     *     @example
     *     // Create many Practices
     *     const practice = await prisma.practice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PracticeCreateManyArgs>(
      args?: SelectSubset<T, PracticeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Practice.
     * @param {PracticeDeleteArgs} args - Arguments to delete one Practice.
     * @example
     * // Delete one Practice
     * const Practice = await prisma.practice.delete({
     *   where: {
     *     // ... filter to delete one Practice
     *   }
     * })
     * 
    **/
    delete<T extends PracticeDeleteArgs>(
      args: SelectSubset<T, PracticeDeleteArgs>
    ): CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>>

    /**
     * Update one Practice.
     * @param {PracticeUpdateArgs} args - Arguments to update one Practice.
     * @example
     * // Update one Practice
     * const practice = await prisma.practice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PracticeUpdateArgs>(
      args: SelectSubset<T, PracticeUpdateArgs>
    ): CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>>

    /**
     * Delete zero or more Practices.
     * @param {PracticeDeleteManyArgs} args - Arguments to filter Practices to delete.
     * @example
     * // Delete a few Practices
     * const { count } = await prisma.practice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PracticeDeleteManyArgs>(
      args?: SelectSubset<T, PracticeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PracticeUpdateManyArgs>(
      args: SelectSubset<T, PracticeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Practice.
     * @param {PracticeUpsertArgs} args - Arguments to update or create a Practice.
     * @example
     * // Update or create a Practice
     * const practice = await prisma.practice.upsert({
     *   create: {
     *     // ... data to create a Practice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Practice we want to update
     *   }
     * })
    **/
    upsert<T extends PracticeUpsertArgs>(
      args: SelectSubset<T, PracticeUpsertArgs>
    ): CheckSelect<T, Prisma__PracticeClient<Practice>, Prisma__PracticeClient<PracticeGetPayload<T>>>

    /**
     * Count the number of Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeCountArgs} args - Arguments to filter Practices to count.
     * @example
     * // Count the number of Practices
     * const count = await prisma.practice.count({
     *   where: {
     *     // ... the filter for the Practices we want to count
     *   }
     * })
    **/
    count<T extends PracticeCountArgs>(
      args?: Subset<T, PracticeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeAggregateArgs>(args: Subset<T, PracticeAggregateArgs>): PrismaPromise<GetPracticeAggregateType<T>>

    /**
     * Group by Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeGroupByArgs['orderBy'] }
        : { orderBy?: PracticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Practice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PracticeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subject<T extends SubjectArgs = {}>(args?: Subset<T, SubjectArgs>): CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Practice findUnique
   */
  export type PracticeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * Throw an Error if a Practice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Practice to fetch.
     * 
    **/
    where: PracticeWhereUniqueInput
  }


  /**
   * Practice findFirst
   */
  export type PracticeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * Throw an Error if a Practice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Practice to fetch.
     * 
    **/
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     * 
    **/
    orderBy?: Enumerable<PracticeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     * 
    **/
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     * 
    **/
    distinct?: Enumerable<PracticeScalarFieldEnum>
  }


  /**
   * Practice findMany
   */
  export type PracticeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * Filter, which Practices to fetch.
     * 
    **/
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     * 
    **/
    orderBy?: Enumerable<PracticeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Practices.
     * 
    **/
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PracticeScalarFieldEnum>
  }


  /**
   * Practice create
   */
  export type PracticeCreateArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * The data needed to create a Practice.
     * 
    **/
    data: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
  }


  /**
   * Practice createMany
   */
  export type PracticeCreateManyArgs = {
    data: Enumerable<PracticeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Practice update
   */
  export type PracticeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * The data needed to update a Practice.
     * 
    **/
    data: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
    /**
     * Choose, which Practice to update.
     * 
    **/
    where: PracticeWhereUniqueInput
  }


  /**
   * Practice updateMany
   */
  export type PracticeUpdateManyArgs = {
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    where?: PracticeWhereInput
  }


  /**
   * Practice upsert
   */
  export type PracticeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * The filter to search for the Practice to update in case it exists.
     * 
    **/
    where: PracticeWhereUniqueInput
    /**
     * In case the Practice found by the `where` argument doesn't exist, create a new Practice with this data.
     * 
    **/
    create: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
    /**
     * In case the Practice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
  }


  /**
   * Practice delete
   */
  export type PracticeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
    /**
     * Filter which Practice to delete.
     * 
    **/
    where: PracticeWhereUniqueInput
  }


  /**
   * Practice deleteMany
   */
  export type PracticeDeleteManyArgs = {
    where?: PracticeWhereInput
  }


  /**
   * Practice without action
   */
  export type PracticeArgs = {
    /**
     * Select specific fields to fetch from the Practice
     * 
    **/
    select?: PracticeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PracticeInclude | null
  }



  /**
   * Model Website
   */


  export type AggregateWebsite = {
    _count: WebsiteCountAggregateOutputType | null
    _avg: WebsiteAvgAggregateOutputType | null
    _sum: WebsiteSumAggregateOutputType | null
    _min: WebsiteMinAggregateOutputType | null
    _max: WebsiteMaxAggregateOutputType | null
  }

  export type WebsiteAvgAggregateOutputType = {
    id: number | null
  }

  export type WebsiteSumAggregateOutputType = {
    id: number | null
  }

  export type WebsiteMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    url: string | null
    summary: string | null
  }

  export type WebsiteMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    url: string | null
    summary: string | null
  }

  export type WebsiteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subjectId: number
    url: number
    summary: number
    _all: number
  }


  export type WebsiteAvgAggregateInputType = {
    id?: true
  }

  export type WebsiteSumAggregateInputType = {
    id?: true
  }

  export type WebsiteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    url?: true
    summary?: true
  }

  export type WebsiteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    url?: true
    summary?: true
  }

  export type WebsiteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    url?: true
    summary?: true
    _all?: true
  }

  export type WebsiteAggregateArgs = {
    /**
     * Filter which Website to aggregate.
     * 
    **/
    where?: WebsiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     * 
    **/
    orderBy?: Enumerable<WebsiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WebsiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Websites
    **/
    _count?: true | WebsiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebsiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebsiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebsiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebsiteMaxAggregateInputType
  }

  export type GetWebsiteAggregateType<T extends WebsiteAggregateArgs> = {
        [P in keyof T & keyof AggregateWebsite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebsite[P]>
      : GetScalarType<T[P], AggregateWebsite[P]>
  }




  export type WebsiteGroupByArgs = {
    where?: WebsiteWhereInput
    orderBy?: Enumerable<WebsiteOrderByWithAggregationInput>
    by: Array<WebsiteScalarFieldEnum>
    having?: WebsiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebsiteCountAggregateInputType | true
    _avg?: WebsiteAvgAggregateInputType
    _sum?: WebsiteSumAggregateInputType
    _min?: WebsiteMinAggregateInputType
    _max?: WebsiteMaxAggregateInputType
  }


  export type WebsiteGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    subjectId: string
    url: string
    summary: string
    _count: WebsiteCountAggregateOutputType | null
    _avg: WebsiteAvgAggregateOutputType | null
    _sum: WebsiteSumAggregateOutputType | null
    _min: WebsiteMinAggregateOutputType | null
    _max: WebsiteMaxAggregateOutputType | null
  }

  type GetWebsiteGroupByPayload<T extends WebsiteGroupByArgs> = Promise<
    Array<
      PickArray<WebsiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebsiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebsiteGroupByOutputType[P]>
            : GetScalarType<T[P], WebsiteGroupByOutputType[P]>
        }
      >
    >


  export type WebsiteSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    url?: boolean
    summary?: boolean
  }

  export type WebsiteInclude = {
    subject?: boolean | SubjectArgs
  }

  export type WebsiteGetPayload<
    S extends boolean | null | undefined | WebsiteArgs,
    U = keyof S
      > = S extends true
        ? Website
    : S extends undefined
    ? never
    : S extends WebsiteArgs | WebsiteFindManyArgs
    ?'include' extends U
    ? Website  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subject'
        ? SubjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Website ?Website [P]
  : 
          P extends 'subject'
        ? SubjectGetPayload<S['select'][P]> : never
  } 
    : Website
  : Website


  type WebsiteCountArgs = Merge<
    Omit<WebsiteFindManyArgs, 'select' | 'include'> & {
      select?: WebsiteCountAggregateInputType | true
    }
  >

  export interface WebsiteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Website that matches the filter.
     * @param {WebsiteFindUniqueArgs} args - Arguments to find a Website
     * @example
     * // Get one Website
     * const website = await prisma.website.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebsiteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WebsiteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Website'> extends True ? CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>> : CheckSelect<T, Prisma__WebsiteClient<Website | null >, Prisma__WebsiteClient<WebsiteGetPayload<T> | null >>

    /**
     * Find the first Website that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteFindFirstArgs} args - Arguments to find a Website
     * @example
     * // Get one Website
     * const website = await prisma.website.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebsiteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WebsiteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Website'> extends True ? CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>> : CheckSelect<T, Prisma__WebsiteClient<Website | null >, Prisma__WebsiteClient<WebsiteGetPayload<T> | null >>

    /**
     * Find zero or more Websites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Websites
     * const websites = await prisma.website.findMany()
     * 
     * // Get first 10 Websites
     * const websites = await prisma.website.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const websiteWithIdOnly = await prisma.website.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebsiteFindManyArgs>(
      args?: SelectSubset<T, WebsiteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Website>>, PrismaPromise<Array<WebsiteGetPayload<T>>>>

    /**
     * Create a Website.
     * @param {WebsiteCreateArgs} args - Arguments to create a Website.
     * @example
     * // Create one Website
     * const Website = await prisma.website.create({
     *   data: {
     *     // ... data to create a Website
     *   }
     * })
     * 
    **/
    create<T extends WebsiteCreateArgs>(
      args: SelectSubset<T, WebsiteCreateArgs>
    ): CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>>

    /**
     * Create many Websites.
     *     @param {WebsiteCreateManyArgs} args - Arguments to create many Websites.
     *     @example
     *     // Create many Websites
     *     const website = await prisma.website.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebsiteCreateManyArgs>(
      args?: SelectSubset<T, WebsiteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Website.
     * @param {WebsiteDeleteArgs} args - Arguments to delete one Website.
     * @example
     * // Delete one Website
     * const Website = await prisma.website.delete({
     *   where: {
     *     // ... filter to delete one Website
     *   }
     * })
     * 
    **/
    delete<T extends WebsiteDeleteArgs>(
      args: SelectSubset<T, WebsiteDeleteArgs>
    ): CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>>

    /**
     * Update one Website.
     * @param {WebsiteUpdateArgs} args - Arguments to update one Website.
     * @example
     * // Update one Website
     * const website = await prisma.website.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebsiteUpdateArgs>(
      args: SelectSubset<T, WebsiteUpdateArgs>
    ): CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>>

    /**
     * Delete zero or more Websites.
     * @param {WebsiteDeleteManyArgs} args - Arguments to filter Websites to delete.
     * @example
     * // Delete a few Websites
     * const { count } = await prisma.website.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebsiteDeleteManyArgs>(
      args?: SelectSubset<T, WebsiteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Websites
     * const website = await prisma.website.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebsiteUpdateManyArgs>(
      args: SelectSubset<T, WebsiteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Website.
     * @param {WebsiteUpsertArgs} args - Arguments to update or create a Website.
     * @example
     * // Update or create a Website
     * const website = await prisma.website.upsert({
     *   create: {
     *     // ... data to create a Website
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Website we want to update
     *   }
     * })
    **/
    upsert<T extends WebsiteUpsertArgs>(
      args: SelectSubset<T, WebsiteUpsertArgs>
    ): CheckSelect<T, Prisma__WebsiteClient<Website>, Prisma__WebsiteClient<WebsiteGetPayload<T>>>

    /**
     * Count the number of Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteCountArgs} args - Arguments to filter Websites to count.
     * @example
     * // Count the number of Websites
     * const count = await prisma.website.count({
     *   where: {
     *     // ... the filter for the Websites we want to count
     *   }
     * })
    **/
    count<T extends WebsiteCountArgs>(
      args?: Subset<T, WebsiteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebsiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Website.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebsiteAggregateArgs>(args: Subset<T, WebsiteAggregateArgs>): PrismaPromise<GetWebsiteAggregateType<T>>

    /**
     * Group by Website.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebsiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebsiteGroupByArgs['orderBy'] }
        : { orderBy?: WebsiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebsiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsiteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Website.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WebsiteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subject<T extends SubjectArgs = {}>(args?: Subset<T, SubjectArgs>): CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Website findUnique
   */
  export type WebsiteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * Throw an Error if a Website can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Website to fetch.
     * 
    **/
    where: WebsiteWhereUniqueInput
  }


  /**
   * Website findFirst
   */
  export type WebsiteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * Throw an Error if a Website can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Website to fetch.
     * 
    **/
    where?: WebsiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     * 
    **/
    orderBy?: Enumerable<WebsiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Websites.
     * 
    **/
    cursor?: WebsiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Websites.
     * 
    **/
    distinct?: Enumerable<WebsiteScalarFieldEnum>
  }


  /**
   * Website findMany
   */
  export type WebsiteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * Filter, which Websites to fetch.
     * 
    **/
    where?: WebsiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     * 
    **/
    orderBy?: Enumerable<WebsiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Websites.
     * 
    **/
    cursor?: WebsiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WebsiteScalarFieldEnum>
  }


  /**
   * Website create
   */
  export type WebsiteCreateArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * The data needed to create a Website.
     * 
    **/
    data: XOR<WebsiteCreateInput, WebsiteUncheckedCreateInput>
  }


  /**
   * Website createMany
   */
  export type WebsiteCreateManyArgs = {
    data: Enumerable<WebsiteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Website update
   */
  export type WebsiteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * The data needed to update a Website.
     * 
    **/
    data: XOR<WebsiteUpdateInput, WebsiteUncheckedUpdateInput>
    /**
     * Choose, which Website to update.
     * 
    **/
    where: WebsiteWhereUniqueInput
  }


  /**
   * Website updateMany
   */
  export type WebsiteUpdateManyArgs = {
    data: XOR<WebsiteUpdateManyMutationInput, WebsiteUncheckedUpdateManyInput>
    where?: WebsiteWhereInput
  }


  /**
   * Website upsert
   */
  export type WebsiteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * The filter to search for the Website to update in case it exists.
     * 
    **/
    where: WebsiteWhereUniqueInput
    /**
     * In case the Website found by the `where` argument doesn't exist, create a new Website with this data.
     * 
    **/
    create: XOR<WebsiteCreateInput, WebsiteUncheckedCreateInput>
    /**
     * In case the Website was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WebsiteUpdateInput, WebsiteUncheckedUpdateInput>
  }


  /**
   * Website delete
   */
  export type WebsiteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
    /**
     * Filter which Website to delete.
     * 
    **/
    where: WebsiteWhereUniqueInput
  }


  /**
   * Website deleteMany
   */
  export type WebsiteDeleteManyArgs = {
    where?: WebsiteWhereInput
  }


  /**
   * Website without action
   */
  export type WebsiteArgs = {
    /**
     * Select specific fields to fetch from the Website
     * 
    **/
    select?: WebsiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebsiteInclude | null
  }



  /**
   * Model Note
   */


  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    id: number | null
  }

  export type NoteSumAggregateOutputType = {
    id: number | null
  }

  export type NoteMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    content: string | null
    title: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    content: string | null
    title: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subjectId: number
    content: number
    title: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    id?: true
  }

  export type NoteSumAggregateInputType = {
    id?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    content?: true
    title?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    content?: true
    title?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    content?: true
    title?: true
    _all?: true
  }

  export type NoteAggregateArgs = {
    /**
     * Filter which Note to aggregate.
     * 
    **/
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     * 
    **/
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs = {
    where?: NoteWhereInput
    orderBy?: Enumerable<NoteOrderByWithAggregationInput>
    by: Array<NoteScalarFieldEnum>
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _avg?: NoteAvgAggregateInputType
    _sum?: NoteSumAggregateInputType
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }


  export type NoteGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    subjectId: string
    content: string
    title: string
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Promise<
    Array<
      PickArray<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    content?: boolean
    title?: boolean
  }

  export type NoteInclude = {
    subject?: boolean | SubjectArgs
  }

  export type NoteGetPayload<
    S extends boolean | null | undefined | NoteArgs,
    U = keyof S
      > = S extends true
        ? Note
    : S extends undefined
    ? never
    : S extends NoteArgs | NoteFindManyArgs
    ?'include' extends U
    ? Note  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subject'
        ? SubjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Note ?Note [P]
  : 
          P extends 'subject'
        ? SubjectGetPayload<S['select'][P]> : never
  } 
    : Note
  : Note


  type NoteCountArgs = Merge<
    Omit<NoteFindManyArgs, 'select' | 'include'> & {
      select?: NoteCountAggregateInputType | true
    }
  >

  export interface NoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Note'> extends True ? CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>> : CheckSelect<T, Prisma__NoteClient<Note | null >, Prisma__NoteClient<NoteGetPayload<T> | null >>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Note'> extends True ? CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>> : CheckSelect<T, Prisma__NoteClient<Note | null >, Prisma__NoteClient<NoteGetPayload<T> | null >>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoteFindManyArgs>(
      args?: SelectSubset<T, NoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Note>>, PrismaPromise<Array<NoteGetPayload<T>>>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs>(
      args: SelectSubset<T, NoteCreateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Create many Notes.
     *     @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const note = await prisma.note.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoteCreateManyArgs>(
      args?: SelectSubset<T, NoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs>(
      args: SelectSubset<T, NoteDeleteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs>(
      args: SelectSubset<T, NoteUpdateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs>(
      args?: SelectSubset<T, NoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs>(
      args: SelectSubset<T, NoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs>(
      args: SelectSubset<T, NoteUpsertArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subject<T extends SubjectArgs = {}>(args?: Subset<T, SubjectArgs>): CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * Throw an Error if a Note can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Note to fetch.
     * 
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * Throw an Error if a Note can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Note to fetch.
     * 
    **/
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     * 
    **/
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     * 
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     * 
    **/
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note findMany
   */
  export type NoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * Filter, which Notes to fetch.
     * 
    **/
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     * 
    **/
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     * 
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note create
   */
  export type NoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * The data needed to create a Note.
     * 
    **/
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }


  /**
   * Note createMany
   */
  export type NoteCreateManyArgs = {
    data: Enumerable<NoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * The data needed to update a Note.
     * 
    **/
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     * 
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs = {
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * The filter to search for the Note to update in case it exists.
     * 
    **/
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     * 
    **/
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
    /**
     * Filter which Note to delete.
     * 
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs = {
    where?: NoteWhereInput
  }


  /**
   * Note without action
   */
  export type NoteArgs = {
    /**
     * Select specific fields to fetch from the Note
     * 
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoteInclude | null
  }



  /**
   * Model Goal
   */


  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    id: number | null
  }

  export type GoalSumAggregateOutputType = {
    id: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    title: string | null
    estimatedCompletion: Date | null
    description: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    title: string | null
    estimatedCompletion: Date | null
    description: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subjectId: number
    title: number
    estimatedCompletion: number
    description: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    id?: true
  }

  export type GoalSumAggregateInputType = {
    id?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    estimatedCompletion?: true
    description?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    estimatedCompletion?: true
    description?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    estimatedCompletion?: true
    description?: true
    _all?: true
  }

  export type GoalAggregateArgs = {
    /**
     * Filter which Goal to aggregate.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs = {
    where?: GoalWhereInput
    orderBy?: Enumerable<GoalOrderByWithAggregationInput>
    by: Array<GoalScalarFieldEnum>
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }


  export type GoalGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    subjectId: string
    title: string
    estimatedCompletion: Date
    description: string
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Promise<
    Array<
      PickArray<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    title?: boolean
    estimatedCompletion?: boolean
    description?: boolean
  }

  export type GoalInclude = {
    subject?: boolean | SubjectArgs
  }

  export type GoalGetPayload<
    S extends boolean | null | undefined | GoalArgs,
    U = keyof S
      > = S extends true
        ? Goal
    : S extends undefined
    ? never
    : S extends GoalArgs | GoalFindManyArgs
    ?'include' extends U
    ? Goal  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subject'
        ? SubjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Goal ?Goal [P]
  : 
          P extends 'subject'
        ? SubjectGetPayload<S['select'][P]> : never
  } 
    : Goal
  : Goal


  type GoalCountArgs = Merge<
    Omit<GoalFindManyArgs, 'select' | 'include'> & {
      select?: GoalCountAggregateInputType | true
    }
  >

  export interface GoalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GoalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Goal'> extends True ? CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>> : CheckSelect<T, Prisma__GoalClient<Goal | null >, Prisma__GoalClient<GoalGetPayload<T> | null >>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GoalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Goal'> extends True ? CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>> : CheckSelect<T, Prisma__GoalClient<Goal | null >, Prisma__GoalClient<GoalGetPayload<T> | null >>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoalFindManyArgs>(
      args?: SelectSubset<T, GoalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Goal>>, PrismaPromise<Array<GoalGetPayload<T>>>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
    **/
    create<T extends GoalCreateArgs>(
      args: SelectSubset<T, GoalCreateArgs>
    ): CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>>

    /**
     * Create many Goals.
     *     @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     *     @example
     *     // Create many Goals
     *     const goal = await prisma.goal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoalCreateManyArgs>(
      args?: SelectSubset<T, GoalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
    **/
    delete<T extends GoalDeleteArgs>(
      args: SelectSubset<T, GoalDeleteArgs>
    ): CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoalUpdateArgs>(
      args: SelectSubset<T, GoalUpdateArgs>
    ): CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoalDeleteManyArgs>(
      args?: SelectSubset<T, GoalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoalUpdateManyArgs>(
      args: SelectSubset<T, GoalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
    **/
    upsert<T extends GoalUpsertArgs>(
      args: SelectSubset<T, GoalUpsertArgs>
    ): CheckSelect<T, Prisma__GoalClient<Goal>, Prisma__GoalClient<GoalGetPayload<T>>>

    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GoalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subject<T extends SubjectArgs = {}>(args?: Subset<T, SubjectArgs>): CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * Throw an Error if a Goal can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Goal to fetch.
     * 
    **/
    where: GoalWhereUniqueInput
  }


  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * Throw an Error if a Goal can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Goal to fetch.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     * 
    **/
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Goal findMany
   */
  export type GoalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * Filter, which Goals to fetch.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Goal create
   */
  export type GoalCreateArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * The data needed to create a Goal.
     * 
    **/
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }


  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs = {
    data: Enumerable<GoalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Goal update
   */
  export type GoalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * The data needed to update a Goal.
     * 
    **/
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     * 
    **/
    where: GoalWhereUniqueInput
  }


  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs = {
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    where?: GoalWhereInput
  }


  /**
   * Goal upsert
   */
  export type GoalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * The filter to search for the Goal to update in case it exists.
     * 
    **/
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     * 
    **/
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }


  /**
   * Goal delete
   */
  export type GoalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
    /**
     * Filter which Goal to delete.
     * 
    **/
    where: GoalWhereUniqueInput
  }


  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs = {
    where?: GoalWhereInput
  }


  /**
   * Goal without action
   */
  export type GoalArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalInclude | null
  }



  /**
   * Model Reflection
   */


  export type AggregateReflection = {
    _count: ReflectionCountAggregateOutputType | null
    _avg: ReflectionAvgAggregateOutputType | null
    _sum: ReflectionSumAggregateOutputType | null
    _min: ReflectionMinAggregateOutputType | null
    _max: ReflectionMaxAggregateOutputType | null
  }

  export type ReflectionAvgAggregateOutputType = {
    id: number | null
  }

  export type ReflectionSumAggregateOutputType = {
    id: number | null
  }

  export type ReflectionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    title: string | null
    content: string | null
  }

  export type ReflectionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subjectId: string | null
    title: string | null
    content: string | null
  }

  export type ReflectionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subjectId: number
    title: number
    content: number
    _all: number
  }


  export type ReflectionAvgAggregateInputType = {
    id?: true
  }

  export type ReflectionSumAggregateInputType = {
    id?: true
  }

  export type ReflectionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    content?: true
  }

  export type ReflectionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    content?: true
  }

  export type ReflectionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subjectId?: true
    title?: true
    content?: true
    _all?: true
  }

  export type ReflectionAggregateArgs = {
    /**
     * Filter which Reflection to aggregate.
     * 
    **/
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     * 
    **/
    orderBy?: Enumerable<ReflectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reflections
    **/
    _count?: true | ReflectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReflectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReflectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReflectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReflectionMaxAggregateInputType
  }

  export type GetReflectionAggregateType<T extends ReflectionAggregateArgs> = {
        [P in keyof T & keyof AggregateReflection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReflection[P]>
      : GetScalarType<T[P], AggregateReflection[P]>
  }




  export type ReflectionGroupByArgs = {
    where?: ReflectionWhereInput
    orderBy?: Enumerable<ReflectionOrderByWithAggregationInput>
    by: Array<ReflectionScalarFieldEnum>
    having?: ReflectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReflectionCountAggregateInputType | true
    _avg?: ReflectionAvgAggregateInputType
    _sum?: ReflectionSumAggregateInputType
    _min?: ReflectionMinAggregateInputType
    _max?: ReflectionMaxAggregateInputType
  }


  export type ReflectionGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    subjectId: string
    title: string
    content: string
    _count: ReflectionCountAggregateOutputType | null
    _avg: ReflectionAvgAggregateOutputType | null
    _sum: ReflectionSumAggregateOutputType | null
    _min: ReflectionMinAggregateOutputType | null
    _max: ReflectionMaxAggregateOutputType | null
  }

  type GetReflectionGroupByPayload<T extends ReflectionGroupByArgs> = Promise<
    Array<
      PickArray<ReflectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReflectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReflectionGroupByOutputType[P]>
            : GetScalarType<T[P], ReflectionGroupByOutputType[P]>
        }
      >
    >


  export type ReflectionSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    title?: boolean
    content?: boolean
  }

  export type ReflectionInclude = {
    subject?: boolean | SubjectArgs
  }

  export type ReflectionGetPayload<
    S extends boolean | null | undefined | ReflectionArgs,
    U = keyof S
      > = S extends true
        ? Reflection
    : S extends undefined
    ? never
    : S extends ReflectionArgs | ReflectionFindManyArgs
    ?'include' extends U
    ? Reflection  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subject'
        ? SubjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Reflection ?Reflection [P]
  : 
          P extends 'subject'
        ? SubjectGetPayload<S['select'][P]> : never
  } 
    : Reflection
  : Reflection


  type ReflectionCountArgs = Merge<
    Omit<ReflectionFindManyArgs, 'select' | 'include'> & {
      select?: ReflectionCountAggregateInputType | true
    }
  >

  export interface ReflectionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reflection that matches the filter.
     * @param {ReflectionFindUniqueArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReflectionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReflectionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reflection'> extends True ? CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>> : CheckSelect<T, Prisma__ReflectionClient<Reflection | null >, Prisma__ReflectionClient<ReflectionGetPayload<T> | null >>

    /**
     * Find the first Reflection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionFindFirstArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReflectionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReflectionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reflection'> extends True ? CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>> : CheckSelect<T, Prisma__ReflectionClient<Reflection | null >, Prisma__ReflectionClient<ReflectionGetPayload<T> | null >>

    /**
     * Find zero or more Reflections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reflections
     * const reflections = await prisma.reflection.findMany()
     * 
     * // Get first 10 Reflections
     * const reflections = await prisma.reflection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reflectionWithIdOnly = await prisma.reflection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReflectionFindManyArgs>(
      args?: SelectSubset<T, ReflectionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reflection>>, PrismaPromise<Array<ReflectionGetPayload<T>>>>

    /**
     * Create a Reflection.
     * @param {ReflectionCreateArgs} args - Arguments to create a Reflection.
     * @example
     * // Create one Reflection
     * const Reflection = await prisma.reflection.create({
     *   data: {
     *     // ... data to create a Reflection
     *   }
     * })
     * 
    **/
    create<T extends ReflectionCreateArgs>(
      args: SelectSubset<T, ReflectionCreateArgs>
    ): CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>>

    /**
     * Create many Reflections.
     *     @param {ReflectionCreateManyArgs} args - Arguments to create many Reflections.
     *     @example
     *     // Create many Reflections
     *     const reflection = await prisma.reflection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReflectionCreateManyArgs>(
      args?: SelectSubset<T, ReflectionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reflection.
     * @param {ReflectionDeleteArgs} args - Arguments to delete one Reflection.
     * @example
     * // Delete one Reflection
     * const Reflection = await prisma.reflection.delete({
     *   where: {
     *     // ... filter to delete one Reflection
     *   }
     * })
     * 
    **/
    delete<T extends ReflectionDeleteArgs>(
      args: SelectSubset<T, ReflectionDeleteArgs>
    ): CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>>

    /**
     * Update one Reflection.
     * @param {ReflectionUpdateArgs} args - Arguments to update one Reflection.
     * @example
     * // Update one Reflection
     * const reflection = await prisma.reflection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReflectionUpdateArgs>(
      args: SelectSubset<T, ReflectionUpdateArgs>
    ): CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>>

    /**
     * Delete zero or more Reflections.
     * @param {ReflectionDeleteManyArgs} args - Arguments to filter Reflections to delete.
     * @example
     * // Delete a few Reflections
     * const { count } = await prisma.reflection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReflectionDeleteManyArgs>(
      args?: SelectSubset<T, ReflectionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reflections
     * const reflection = await prisma.reflection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReflectionUpdateManyArgs>(
      args: SelectSubset<T, ReflectionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reflection.
     * @param {ReflectionUpsertArgs} args - Arguments to update or create a Reflection.
     * @example
     * // Update or create a Reflection
     * const reflection = await prisma.reflection.upsert({
     *   create: {
     *     // ... data to create a Reflection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reflection we want to update
     *   }
     * })
    **/
    upsert<T extends ReflectionUpsertArgs>(
      args: SelectSubset<T, ReflectionUpsertArgs>
    ): CheckSelect<T, Prisma__ReflectionClient<Reflection>, Prisma__ReflectionClient<ReflectionGetPayload<T>>>

    /**
     * Count the number of Reflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionCountArgs} args - Arguments to filter Reflections to count.
     * @example
     * // Count the number of Reflections
     * const count = await prisma.reflection.count({
     *   where: {
     *     // ... the filter for the Reflections we want to count
     *   }
     * })
    **/
    count<T extends ReflectionCountArgs>(
      args?: Subset<T, ReflectionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReflectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReflectionAggregateArgs>(args: Subset<T, ReflectionAggregateArgs>): PrismaPromise<GetReflectionAggregateType<T>>

    /**
     * Group by Reflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReflectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReflectionGroupByArgs['orderBy'] }
        : { orderBy?: ReflectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReflectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReflectionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reflection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReflectionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subject<T extends SubjectArgs = {}>(args?: Subset<T, SubjectArgs>): CheckSelect<T, Prisma__SubjectClient<Subject | null >, Prisma__SubjectClient<SubjectGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reflection findUnique
   */
  export type ReflectionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * Throw an Error if a Reflection can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reflection to fetch.
     * 
    **/
    where: ReflectionWhereUniqueInput
  }


  /**
   * Reflection findFirst
   */
  export type ReflectionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * Throw an Error if a Reflection can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reflection to fetch.
     * 
    **/
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     * 
    **/
    orderBy?: Enumerable<ReflectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reflections.
     * 
    **/
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reflections.
     * 
    **/
    distinct?: Enumerable<ReflectionScalarFieldEnum>
  }


  /**
   * Reflection findMany
   */
  export type ReflectionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * Filter, which Reflections to fetch.
     * 
    **/
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     * 
    **/
    orderBy?: Enumerable<ReflectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reflections.
     * 
    **/
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReflectionScalarFieldEnum>
  }


  /**
   * Reflection create
   */
  export type ReflectionCreateArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * The data needed to create a Reflection.
     * 
    **/
    data: XOR<ReflectionCreateInput, ReflectionUncheckedCreateInput>
  }


  /**
   * Reflection createMany
   */
  export type ReflectionCreateManyArgs = {
    data: Enumerable<ReflectionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reflection update
   */
  export type ReflectionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * The data needed to update a Reflection.
     * 
    **/
    data: XOR<ReflectionUpdateInput, ReflectionUncheckedUpdateInput>
    /**
     * Choose, which Reflection to update.
     * 
    **/
    where: ReflectionWhereUniqueInput
  }


  /**
   * Reflection updateMany
   */
  export type ReflectionUpdateManyArgs = {
    data: XOR<ReflectionUpdateManyMutationInput, ReflectionUncheckedUpdateManyInput>
    where?: ReflectionWhereInput
  }


  /**
   * Reflection upsert
   */
  export type ReflectionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * The filter to search for the Reflection to update in case it exists.
     * 
    **/
    where: ReflectionWhereUniqueInput
    /**
     * In case the Reflection found by the `where` argument doesn't exist, create a new Reflection with this data.
     * 
    **/
    create: XOR<ReflectionCreateInput, ReflectionUncheckedCreateInput>
    /**
     * In case the Reflection was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReflectionUpdateInput, ReflectionUncheckedUpdateInput>
  }


  /**
   * Reflection delete
   */
  export type ReflectionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
    /**
     * Filter which Reflection to delete.
     * 
    **/
    where: ReflectionWhereUniqueInput
  }


  /**
   * Reflection deleteMany
   */
  export type ReflectionDeleteManyArgs = {
    where?: ReflectionWhereInput
  }


  /**
   * Reflection without action
   */
  export type ReflectionArgs = {
    /**
     * Select specific fields to fetch from the Reflection
     * 
    **/
    select?: ReflectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReflectionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    authorId: 'authorId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const PracticeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subjectId: 'subjectId',
    quantity: 'quantity',
    description: 'description'
  };

  export type PracticeScalarFieldEnum = (typeof PracticeScalarFieldEnum)[keyof typeof PracticeScalarFieldEnum]


  export const WebsiteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subjectId: 'subjectId',
    url: 'url',
    summary: 'summary'
  };

  export type WebsiteScalarFieldEnum = (typeof WebsiteScalarFieldEnum)[keyof typeof WebsiteScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subjectId: 'subjectId',
    content: 'content',
    title: 'title'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subjectId: 'subjectId',
    title: 'title',
    estimatedCompletion: 'estimatedCompletion',
    description: 'description'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const ReflectionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subjectId: 'subjectId',
    title: 'title',
    content: 'content'
  };

  export type ReflectionScalarFieldEnum = (typeof ReflectionScalarFieldEnum)[keyof typeof ReflectionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    subjects?: SubjectListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    subjects?: SubjectOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SubjectWhereInput = {
    AND?: Enumerable<SubjectWhereInput>
    OR?: Enumerable<SubjectWhereInput>
    NOT?: Enumerable<SubjectWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    authorId?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    Practices?: PracticeListRelationFilter
    Websites?: WebsiteListRelationFilter
    Notes?: NoteListRelationFilter
    Goals?: GoalListRelationFilter
    Reflections?: ReflectionListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: UserOrderByWithRelationInput
    authorId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    Practices?: PracticeOrderByRelationAggregateInput
    Websites?: WebsiteOrderByRelationAggregateInput
    Notes?: NoteOrderByRelationAggregateInput
    Goals?: GoalOrderByRelationAggregateInput
    Reflections?: ReflectionOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = {
    id?: string
    subjectId?: SubjectSubjectIdCompoundUniqueInput
  }

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    authorId?: StringWithAggregatesFilter | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PracticeWhereInput = {
    AND?: Enumerable<PracticeWhereInput>
    OR?: Enumerable<PracticeWhereInput>
    NOT?: Enumerable<PracticeWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    description?: StringFilter | string
  }

  export type PracticeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
  }

  export type PracticeWhereUniqueInput = {
    id?: string
    practiceId?: PracticePracticeIdCompoundUniqueInput
  }

  export type PracticeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
    _count?: PracticeCountOrderByAggregateInput
    _avg?: PracticeAvgOrderByAggregateInput
    _max?: PracticeMaxOrderByAggregateInput
    _min?: PracticeMinOrderByAggregateInput
    _sum?: PracticeSumOrderByAggregateInput
  }

  export type PracticeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PracticeScalarWhereWithAggregatesInput>
    OR?: Enumerable<PracticeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PracticeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    subjectId?: StringWithAggregatesFilter | string
    quantity?: IntNullableWithAggregatesFilter | number | null
    description?: StringWithAggregatesFilter | string
  }

  export type WebsiteWhereInput = {
    AND?: Enumerable<WebsiteWhereInput>
    OR?: Enumerable<WebsiteWhereInput>
    NOT?: Enumerable<WebsiteWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: StringFilter | string
    url?: StringFilter | string
    summary?: StringFilter | string
  }

  export type WebsiteOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    url?: SortOrder
    summary?: SortOrder
  }

  export type WebsiteWhereUniqueInput = {
    url?: string
    websiteId?: WebsiteWebsiteIdCompoundUniqueInput
  }

  export type WebsiteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    _count?: WebsiteCountOrderByAggregateInput
    _avg?: WebsiteAvgOrderByAggregateInput
    _max?: WebsiteMaxOrderByAggregateInput
    _min?: WebsiteMinOrderByAggregateInput
    _sum?: WebsiteSumOrderByAggregateInput
  }

  export type WebsiteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WebsiteScalarWhereWithAggregatesInput>
    OR?: Enumerable<WebsiteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WebsiteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    subjectId?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    summary?: StringWithAggregatesFilter | string
  }

  export type NoteWhereInput = {
    AND?: Enumerable<NoteWhereInput>
    OR?: Enumerable<NoteWhereInput>
    NOT?: Enumerable<NoteWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: StringFilter | string
    content?: StringFilter | string
    title?: StringFilter | string
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    content?: SortOrder
    title?: SortOrder
  }

  export type NoteWhereUniqueInput = {
    title?: string
    noteId?: NoteNoteIdCompoundUniqueInput
  }

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    content?: SortOrder
    title?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _avg?: NoteAvgOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
    _sum?: NoteSumOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<NoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NoteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    subjectId?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
  }

  export type GoalWhereInput = {
    AND?: Enumerable<GoalWhereInput>
    OR?: Enumerable<GoalWhereInput>
    NOT?: Enumerable<GoalWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: StringFilter | string
    title?: StringFilter | string
    estimatedCompletion?: DateTimeFilter | Date | string
    description?: StringFilter | string
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    title?: SortOrder
    estimatedCompletion?: SortOrder
    description?: SortOrder
  }

  export type GoalWhereUniqueInput = {
    title?: string
    goalId?: GoalGoalIdCompoundUniqueInput
  }

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    estimatedCompletion?: SortOrder
    description?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GoalScalarWhereWithAggregatesInput>
    OR?: Enumerable<GoalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GoalScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    subjectId?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    estimatedCompletion?: DateTimeWithAggregatesFilter | Date | string
    description?: StringWithAggregatesFilter | string
  }

  export type ReflectionWhereInput = {
    AND?: Enumerable<ReflectionWhereInput>
    OR?: Enumerable<ReflectionWhereInput>
    NOT?: Enumerable<ReflectionWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: StringFilter | string
    title?: StringFilter | string
    content?: StringFilter | string
  }

  export type ReflectionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ReflectionWhereUniqueInput = {
    title?: string
    reflectionId?: ReflectionReflectionIdCompoundUniqueInput
  }

  export type ReflectionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: ReflectionCountOrderByAggregateInput
    _avg?: ReflectionAvgOrderByAggregateInput
    _max?: ReflectionMaxOrderByAggregateInput
    _min?: ReflectionMinOrderByAggregateInput
    _sum?: ReflectionSumOrderByAggregateInput
  }

  export type ReflectionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReflectionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReflectionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReflectionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    subjectId?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    updatedAt?: Date | string
    createdAt?: Date | string
    subjects?: SubjectCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    updatedAt?: Date | string
    createdAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateManyInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quantity?: number | null
    description?: string
    subject: SubjectCreateNestedOneWithoutPracticesInput
  }

  export type PracticeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    quantity?: number | null
    description?: string
  }

  export type PracticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutPracticesInput
  }

  export type PracticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    quantity?: number | null
    description?: string
  }

  export type PracticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    url: string
    summary?: string
    subject: SubjectCreateNestedOneWithoutWebsitesInput
  }

  export type WebsiteUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    url: string
    summary?: string
  }

  export type WebsiteUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutWebsitesInput
  }

  export type WebsiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    url: string
    summary?: string
  }

  export type WebsiteUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: string
    title?: string
    subject: SubjectCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    content?: string
    title?: string
  }

  export type NoteUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutNotesInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    content?: string
    title?: string
  }

  export type NoteUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    estimatedCompletion: Date | string
    description?: string
    subject: SubjectCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    title: string
    estimatedCompletion: Date | string
    description?: string
  }

  export type GoalUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutGoalsInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    title: string
    estimatedCompletion: Date | string
    description?: string
  }

  export type GoalUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    content?: string
    subject: SubjectCreateNestedOneWithoutReflectionsInput
  }

  export type ReflectionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    title: string
    content?: string
  }

  export type ReflectionUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutReflectionsInput
  }

  export type ReflectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subjectId: string
    title: string
    content?: string
  }

  export type ReflectionUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PracticeListRelationFilter = {
    every?: PracticeWhereInput
    some?: PracticeWhereInput
    none?: PracticeWhereInput
  }

  export type WebsiteListRelationFilter = {
    every?: WebsiteWhereInput
    some?: WebsiteWhereInput
    none?: WebsiteWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type ReflectionListRelationFilter = {
    every?: ReflectionWhereInput
    some?: ReflectionWhereInput
    none?: ReflectionWhereInput
  }

  export type PracticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebsiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReflectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectSubjectIdCompoundUniqueInput = {
    title: string
    authorId: string
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PracticePracticeIdCompoundUniqueInput = {
    subjectId: string
    id: string
  }

  export type PracticeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
  }

  export type PracticeAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PracticeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
  }

  export type PracticeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    quantity?: SortOrder
    description?: SortOrder
  }

  export type PracticeSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type WebsiteWebsiteIdCompoundUniqueInput = {
    subjectId: string
    id: number
  }

  export type WebsiteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    url?: SortOrder
    summary?: SortOrder
  }

  export type WebsiteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WebsiteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    url?: SortOrder
    summary?: SortOrder
  }

  export type WebsiteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    url?: SortOrder
    summary?: SortOrder
  }

  export type WebsiteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NoteNoteIdCompoundUniqueInput = {
    subjectId: string
    id: number
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    content?: SortOrder
    title?: SortOrder
  }

  export type NoteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    content?: SortOrder
    title?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    content?: SortOrder
    title?: SortOrder
  }

  export type NoteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GoalGoalIdCompoundUniqueInput = {
    subjectId: string
    id: number
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    estimatedCompletion?: SortOrder
    description?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    estimatedCompletion?: SortOrder
    description?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    estimatedCompletion?: SortOrder
    description?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReflectionReflectionIdCompoundUniqueInput = {
    subjectId: string
    id: number
  }

  export type ReflectionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ReflectionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReflectionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ReflectionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjectId?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ReflectionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SubjectCreateWithoutAuthorInput>, Enumerable<SubjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SubjectCreateOrConnectWithoutAuthorInput>
    createMany?: SubjectCreateManyAuthorInputEnvelope
    connect?: Enumerable<SubjectWhereUniqueInput>
  }

  export type SubjectUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SubjectCreateWithoutAuthorInput>, Enumerable<SubjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SubjectCreateOrConnectWithoutAuthorInput>
    createMany?: SubjectCreateManyAuthorInputEnvelope
    connect?: Enumerable<SubjectWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SubjectUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SubjectCreateWithoutAuthorInput>, Enumerable<SubjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SubjectCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SubjectUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SubjectCreateManyAuthorInputEnvelope
    set?: Enumerable<SubjectWhereUniqueInput>
    disconnect?: Enumerable<SubjectWhereUniqueInput>
    delete?: Enumerable<SubjectWhereUniqueInput>
    connect?: Enumerable<SubjectWhereUniqueInput>
    update?: Enumerable<SubjectUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SubjectUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SubjectScalarWhereInput>
  }

  export type SubjectUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SubjectCreateWithoutAuthorInput>, Enumerable<SubjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SubjectCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SubjectUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SubjectCreateManyAuthorInputEnvelope
    set?: Enumerable<SubjectWhereUniqueInput>
    disconnect?: Enumerable<SubjectWhereUniqueInput>
    delete?: Enumerable<SubjectWhereUniqueInput>
    connect?: Enumerable<SubjectWhereUniqueInput>
    update?: Enumerable<SubjectUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SubjectUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SubjectScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<UserCreateWithoutSubjectsInput, UserUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubjectsInput
    connect?: UserWhereUniqueInput
  }

  export type PracticeCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<PracticeCreateWithoutSubjectInput>, Enumerable<PracticeUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<PracticeCreateOrConnectWithoutSubjectInput>
    createMany?: PracticeCreateManySubjectInputEnvelope
    connect?: Enumerable<PracticeWhereUniqueInput>
  }

  export type WebsiteCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<WebsiteCreateWithoutSubjectInput>, Enumerable<WebsiteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<WebsiteCreateOrConnectWithoutSubjectInput>
    createMany?: WebsiteCreateManySubjectInputEnvelope
    connect?: Enumerable<WebsiteWhereUniqueInput>
  }

  export type NoteCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<NoteCreateWithoutSubjectInput>, Enumerable<NoteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutSubjectInput>
    createMany?: NoteCreateManySubjectInputEnvelope
    connect?: Enumerable<NoteWhereUniqueInput>
  }

  export type GoalCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<GoalCreateWithoutSubjectInput>, Enumerable<GoalUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutSubjectInput>
    createMany?: GoalCreateManySubjectInputEnvelope
    connect?: Enumerable<GoalWhereUniqueInput>
  }

  export type ReflectionCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<ReflectionCreateWithoutSubjectInput>, Enumerable<ReflectionUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<ReflectionCreateOrConnectWithoutSubjectInput>
    createMany?: ReflectionCreateManySubjectInputEnvelope
    connect?: Enumerable<ReflectionWhereUniqueInput>
  }

  export type PracticeUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<PracticeCreateWithoutSubjectInput>, Enumerable<PracticeUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<PracticeCreateOrConnectWithoutSubjectInput>
    createMany?: PracticeCreateManySubjectInputEnvelope
    connect?: Enumerable<PracticeWhereUniqueInput>
  }

  export type WebsiteUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<WebsiteCreateWithoutSubjectInput>, Enumerable<WebsiteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<WebsiteCreateOrConnectWithoutSubjectInput>
    createMany?: WebsiteCreateManySubjectInputEnvelope
    connect?: Enumerable<WebsiteWhereUniqueInput>
  }

  export type NoteUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<NoteCreateWithoutSubjectInput>, Enumerable<NoteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutSubjectInput>
    createMany?: NoteCreateManySubjectInputEnvelope
    connect?: Enumerable<NoteWhereUniqueInput>
  }

  export type GoalUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<GoalCreateWithoutSubjectInput>, Enumerable<GoalUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutSubjectInput>
    createMany?: GoalCreateManySubjectInputEnvelope
    connect?: Enumerable<GoalWhereUniqueInput>
  }

  export type ReflectionUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<ReflectionCreateWithoutSubjectInput>, Enumerable<ReflectionUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<ReflectionCreateOrConnectWithoutSubjectInput>
    createMany?: ReflectionCreateManySubjectInputEnvelope
    connect?: Enumerable<ReflectionWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutSubjectsInput = {
    create?: XOR<UserCreateWithoutSubjectsInput, UserUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubjectsInput
    upsert?: UserUpsertWithoutSubjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSubjectsInput, UserUncheckedUpdateWithoutSubjectsInput>
  }

  export type PracticeUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<PracticeCreateWithoutSubjectInput>, Enumerable<PracticeUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<PracticeCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<PracticeUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: PracticeCreateManySubjectInputEnvelope
    set?: Enumerable<PracticeWhereUniqueInput>
    disconnect?: Enumerable<PracticeWhereUniqueInput>
    delete?: Enumerable<PracticeWhereUniqueInput>
    connect?: Enumerable<PracticeWhereUniqueInput>
    update?: Enumerable<PracticeUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<PracticeUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<PracticeScalarWhereInput>
  }

  export type WebsiteUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<WebsiteCreateWithoutSubjectInput>, Enumerable<WebsiteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<WebsiteCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<WebsiteUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: WebsiteCreateManySubjectInputEnvelope
    set?: Enumerable<WebsiteWhereUniqueInput>
    disconnect?: Enumerable<WebsiteWhereUniqueInput>
    delete?: Enumerable<WebsiteWhereUniqueInput>
    connect?: Enumerable<WebsiteWhereUniqueInput>
    update?: Enumerable<WebsiteUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<WebsiteUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<WebsiteScalarWhereInput>
  }

  export type NoteUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<NoteCreateWithoutSubjectInput>, Enumerable<NoteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: NoteCreateManySubjectInputEnvelope
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    connect?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
  }

  export type GoalUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<GoalCreateWithoutSubjectInput>, Enumerable<GoalUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<GoalUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: GoalCreateManySubjectInputEnvelope
    set?: Enumerable<GoalWhereUniqueInput>
    disconnect?: Enumerable<GoalWhereUniqueInput>
    delete?: Enumerable<GoalWhereUniqueInput>
    connect?: Enumerable<GoalWhereUniqueInput>
    update?: Enumerable<GoalUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<GoalUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<GoalScalarWhereInput>
  }

  export type ReflectionUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<ReflectionCreateWithoutSubjectInput>, Enumerable<ReflectionUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<ReflectionCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<ReflectionUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: ReflectionCreateManySubjectInputEnvelope
    set?: Enumerable<ReflectionWhereUniqueInput>
    disconnect?: Enumerable<ReflectionWhereUniqueInput>
    delete?: Enumerable<ReflectionWhereUniqueInput>
    connect?: Enumerable<ReflectionWhereUniqueInput>
    update?: Enumerable<ReflectionUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<ReflectionUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<ReflectionScalarWhereInput>
  }

  export type PracticeUncheckedUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<PracticeCreateWithoutSubjectInput>, Enumerable<PracticeUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<PracticeCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<PracticeUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: PracticeCreateManySubjectInputEnvelope
    set?: Enumerable<PracticeWhereUniqueInput>
    disconnect?: Enumerable<PracticeWhereUniqueInput>
    delete?: Enumerable<PracticeWhereUniqueInput>
    connect?: Enumerable<PracticeWhereUniqueInput>
    update?: Enumerable<PracticeUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<PracticeUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<PracticeScalarWhereInput>
  }

  export type WebsiteUncheckedUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<WebsiteCreateWithoutSubjectInput>, Enumerable<WebsiteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<WebsiteCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<WebsiteUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: WebsiteCreateManySubjectInputEnvelope
    set?: Enumerable<WebsiteWhereUniqueInput>
    disconnect?: Enumerable<WebsiteWhereUniqueInput>
    delete?: Enumerable<WebsiteWhereUniqueInput>
    connect?: Enumerable<WebsiteWhereUniqueInput>
    update?: Enumerable<WebsiteUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<WebsiteUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<WebsiteScalarWhereInput>
  }

  export type NoteUncheckedUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<NoteCreateWithoutSubjectInput>, Enumerable<NoteUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: NoteCreateManySubjectInputEnvelope
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    connect?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
  }

  export type GoalUncheckedUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<GoalCreateWithoutSubjectInput>, Enumerable<GoalUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<GoalUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: GoalCreateManySubjectInputEnvelope
    set?: Enumerable<GoalWhereUniqueInput>
    disconnect?: Enumerable<GoalWhereUniqueInput>
    delete?: Enumerable<GoalWhereUniqueInput>
    connect?: Enumerable<GoalWhereUniqueInput>
    update?: Enumerable<GoalUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<GoalUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<GoalScalarWhereInput>
  }

  export type ReflectionUncheckedUpdateManyWithoutSubjectInput = {
    create?: XOR<Enumerable<ReflectionCreateWithoutSubjectInput>, Enumerable<ReflectionUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<ReflectionCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<ReflectionUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: ReflectionCreateManySubjectInputEnvelope
    set?: Enumerable<ReflectionWhereUniqueInput>
    disconnect?: Enumerable<ReflectionWhereUniqueInput>
    delete?: Enumerable<ReflectionWhereUniqueInput>
    connect?: Enumerable<ReflectionWhereUniqueInput>
    update?: Enumerable<ReflectionUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<ReflectionUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<ReflectionScalarWhereInput>
  }

  export type SubjectCreateNestedOneWithoutPracticesInput = {
    create?: XOR<SubjectCreateWithoutPracticesInput, SubjectUncheckedCreateWithoutPracticesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutPracticesInput
    connect?: SubjectWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubjectUpdateOneRequiredWithoutPracticesInput = {
    create?: XOR<SubjectCreateWithoutPracticesInput, SubjectUncheckedCreateWithoutPracticesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutPracticesInput
    upsert?: SubjectUpsertWithoutPracticesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutPracticesInput, SubjectUncheckedUpdateWithoutPracticesInput>
  }

  export type SubjectCreateNestedOneWithoutWebsitesInput = {
    create?: XOR<SubjectCreateWithoutWebsitesInput, SubjectUncheckedCreateWithoutWebsitesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutWebsitesInput
    connect?: SubjectWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubjectUpdateOneRequiredWithoutWebsitesInput = {
    create?: XOR<SubjectCreateWithoutWebsitesInput, SubjectUncheckedCreateWithoutWebsitesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutWebsitesInput
    upsert?: SubjectUpsertWithoutWebsitesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutWebsitesInput, SubjectUncheckedUpdateWithoutWebsitesInput>
  }

  export type SubjectCreateNestedOneWithoutNotesInput = {
    create?: XOR<SubjectCreateWithoutNotesInput, SubjectUncheckedCreateWithoutNotesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutNotesInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutNotesInput = {
    create?: XOR<SubjectCreateWithoutNotesInput, SubjectUncheckedCreateWithoutNotesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutNotesInput
    upsert?: SubjectUpsertWithoutNotesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutNotesInput, SubjectUncheckedUpdateWithoutNotesInput>
  }

  export type SubjectCreateNestedOneWithoutGoalsInput = {
    create?: XOR<SubjectCreateWithoutGoalsInput, SubjectUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutGoalsInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutGoalsInput = {
    create?: XOR<SubjectCreateWithoutGoalsInput, SubjectUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutGoalsInput
    upsert?: SubjectUpsertWithoutGoalsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutGoalsInput, SubjectUncheckedUpdateWithoutGoalsInput>
  }

  export type SubjectCreateNestedOneWithoutReflectionsInput = {
    create?: XOR<SubjectCreateWithoutReflectionsInput, SubjectUncheckedCreateWithoutReflectionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutReflectionsInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutReflectionsInput = {
    create?: XOR<SubjectCreateWithoutReflectionsInput, SubjectUncheckedCreateWithoutReflectionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutReflectionsInput
    upsert?: SubjectUpsertWithoutReflectionsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutReflectionsInput, SubjectUncheckedUpdateWithoutReflectionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type SubjectCreateWithoutAuthorInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAuthorInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAuthorInput, SubjectUncheckedCreateWithoutAuthorInput>
  }

  export type SubjectCreateManyAuthorInputEnvelope = {
    data: Enumerable<SubjectCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithWhereUniqueWithoutAuthorInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutAuthorInput, SubjectUncheckedUpdateWithoutAuthorInput>
    create: XOR<SubjectCreateWithoutAuthorInput, SubjectUncheckedCreateWithoutAuthorInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutAuthorInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutAuthorInput, SubjectUncheckedUpdateWithoutAuthorInput>
  }

  export type SubjectUpdateManyWithWhereWithoutAuthorInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutSubjectsInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: Enumerable<SubjectScalarWhereInput>
    OR?: Enumerable<SubjectScalarWhereInput>
    NOT?: Enumerable<SubjectScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    authorId?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSubjectsInput = {
    id?: string
    username: string
    email: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutSubjectsInput = {
    id?: string
    username: string
    email: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutSubjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubjectsInput, UserUncheckedCreateWithoutSubjectsInput>
  }

  export type PracticeCreateWithoutSubjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quantity?: number | null
    description?: string
  }

  export type PracticeUncheckedCreateWithoutSubjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quantity?: number | null
    description?: string
  }

  export type PracticeCreateOrConnectWithoutSubjectInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutSubjectInput, PracticeUncheckedCreateWithoutSubjectInput>
  }

  export type PracticeCreateManySubjectInputEnvelope = {
    data: Enumerable<PracticeCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type WebsiteCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    url: string
    summary?: string
  }

  export type WebsiteUncheckedCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    url: string
    summary?: string
  }

  export type WebsiteCreateOrConnectWithoutSubjectInput = {
    where: WebsiteWhereUniqueInput
    create: XOR<WebsiteCreateWithoutSubjectInput, WebsiteUncheckedCreateWithoutSubjectInput>
  }

  export type WebsiteCreateManySubjectInputEnvelope = {
    data: Enumerable<WebsiteCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: string
    title?: string
  }

  export type NoteUncheckedCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: string
    title?: string
  }

  export type NoteCreateOrConnectWithoutSubjectInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutSubjectInput, NoteUncheckedCreateWithoutSubjectInput>
  }

  export type NoteCreateManySubjectInputEnvelope = {
    data: Enumerable<NoteCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    estimatedCompletion: Date | string
    description?: string
  }

  export type GoalUncheckedCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    estimatedCompletion: Date | string
    description?: string
  }

  export type GoalCreateOrConnectWithoutSubjectInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutSubjectInput, GoalUncheckedCreateWithoutSubjectInput>
  }

  export type GoalCreateManySubjectInputEnvelope = {
    data: Enumerable<GoalCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type ReflectionCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    content?: string
  }

  export type ReflectionUncheckedCreateWithoutSubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    content?: string
  }

  export type ReflectionCreateOrConnectWithoutSubjectInput = {
    where: ReflectionWhereUniqueInput
    create: XOR<ReflectionCreateWithoutSubjectInput, ReflectionUncheckedCreateWithoutSubjectInput>
  }

  export type ReflectionCreateManySubjectInputEnvelope = {
    data: Enumerable<ReflectionCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubjectsInput = {
    update: XOR<UserUpdateWithoutSubjectsInput, UserUncheckedUpdateWithoutSubjectsInput>
    create: XOR<UserCreateWithoutSubjectsInput, UserUncheckedCreateWithoutSubjectsInput>
  }

  export type UserUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeUpsertWithWhereUniqueWithoutSubjectInput = {
    where: PracticeWhereUniqueInput
    update: XOR<PracticeUpdateWithoutSubjectInput, PracticeUncheckedUpdateWithoutSubjectInput>
    create: XOR<PracticeCreateWithoutSubjectInput, PracticeUncheckedCreateWithoutSubjectInput>
  }

  export type PracticeUpdateWithWhereUniqueWithoutSubjectInput = {
    where: PracticeWhereUniqueInput
    data: XOR<PracticeUpdateWithoutSubjectInput, PracticeUncheckedUpdateWithoutSubjectInput>
  }

  export type PracticeUpdateManyWithWhereWithoutSubjectInput = {
    where: PracticeScalarWhereInput
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyWithoutPracticesInput>
  }

  export type PracticeScalarWhereInput = {
    AND?: Enumerable<PracticeScalarWhereInput>
    OR?: Enumerable<PracticeScalarWhereInput>
    NOT?: Enumerable<PracticeScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subjectId?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    description?: StringFilter | string
  }

  export type WebsiteUpsertWithWhereUniqueWithoutSubjectInput = {
    where: WebsiteWhereUniqueInput
    update: XOR<WebsiteUpdateWithoutSubjectInput, WebsiteUncheckedUpdateWithoutSubjectInput>
    create: XOR<WebsiteCreateWithoutSubjectInput, WebsiteUncheckedCreateWithoutSubjectInput>
  }

  export type WebsiteUpdateWithWhereUniqueWithoutSubjectInput = {
    where: WebsiteWhereUniqueInput
    data: XOR<WebsiteUpdateWithoutSubjectInput, WebsiteUncheckedUpdateWithoutSubjectInput>
  }

  export type WebsiteUpdateManyWithWhereWithoutSubjectInput = {
    where: WebsiteScalarWhereInput
    data: XOR<WebsiteUpdateManyMutationInput, WebsiteUncheckedUpdateManyWithoutWebsitesInput>
  }

  export type WebsiteScalarWhereInput = {
    AND?: Enumerable<WebsiteScalarWhereInput>
    OR?: Enumerable<WebsiteScalarWhereInput>
    NOT?: Enumerable<WebsiteScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subjectId?: StringFilter | string
    url?: StringFilter | string
    summary?: StringFilter | string
  }

  export type NoteUpsertWithWhereUniqueWithoutSubjectInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutSubjectInput, NoteUncheckedUpdateWithoutSubjectInput>
    create: XOR<NoteCreateWithoutSubjectInput, NoteUncheckedCreateWithoutSubjectInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutSubjectInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutSubjectInput, NoteUncheckedUpdateWithoutSubjectInput>
  }

  export type NoteUpdateManyWithWhereWithoutSubjectInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutNotesInput>
  }

  export type NoteScalarWhereInput = {
    AND?: Enumerable<NoteScalarWhereInput>
    OR?: Enumerable<NoteScalarWhereInput>
    NOT?: Enumerable<NoteScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subjectId?: StringFilter | string
    content?: StringFilter | string
    title?: StringFilter | string
  }

  export type GoalUpsertWithWhereUniqueWithoutSubjectInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutSubjectInput, GoalUncheckedUpdateWithoutSubjectInput>
    create: XOR<GoalCreateWithoutSubjectInput, GoalUncheckedCreateWithoutSubjectInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutSubjectInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutSubjectInput, GoalUncheckedUpdateWithoutSubjectInput>
  }

  export type GoalUpdateManyWithWhereWithoutSubjectInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutGoalsInput>
  }

  export type GoalScalarWhereInput = {
    AND?: Enumerable<GoalScalarWhereInput>
    OR?: Enumerable<GoalScalarWhereInput>
    NOT?: Enumerable<GoalScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subjectId?: StringFilter | string
    title?: StringFilter | string
    estimatedCompletion?: DateTimeFilter | Date | string
    description?: StringFilter | string
  }

  export type ReflectionUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ReflectionWhereUniqueInput
    update: XOR<ReflectionUpdateWithoutSubjectInput, ReflectionUncheckedUpdateWithoutSubjectInput>
    create: XOR<ReflectionCreateWithoutSubjectInput, ReflectionUncheckedCreateWithoutSubjectInput>
  }

  export type ReflectionUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ReflectionWhereUniqueInput
    data: XOR<ReflectionUpdateWithoutSubjectInput, ReflectionUncheckedUpdateWithoutSubjectInput>
  }

  export type ReflectionUpdateManyWithWhereWithoutSubjectInput = {
    where: ReflectionScalarWhereInput
    data: XOR<ReflectionUpdateManyMutationInput, ReflectionUncheckedUpdateManyWithoutReflectionsInput>
  }

  export type ReflectionScalarWhereInput = {
    AND?: Enumerable<ReflectionScalarWhereInput>
    OR?: Enumerable<ReflectionScalarWhereInput>
    NOT?: Enumerable<ReflectionScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    subjectId?: StringFilter | string
    title?: StringFilter | string
    content?: StringFilter | string
  }

  export type SubjectCreateWithoutPracticesInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutPracticesInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutPracticesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutPracticesInput, SubjectUncheckedCreateWithoutPracticesInput>
  }

  export type SubjectUpsertWithoutPracticesInput = {
    update: XOR<SubjectUpdateWithoutPracticesInput, SubjectUncheckedUpdateWithoutPracticesInput>
    create: XOR<SubjectCreateWithoutPracticesInput, SubjectUncheckedCreateWithoutPracticesInput>
  }

  export type SubjectUpdateWithoutPracticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutPracticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateWithoutWebsitesInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutWebsitesInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutWebsitesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutWebsitesInput, SubjectUncheckedCreateWithoutWebsitesInput>
  }

  export type SubjectUpsertWithoutWebsitesInput = {
    update: XOR<SubjectUpdateWithoutWebsitesInput, SubjectUncheckedUpdateWithoutWebsitesInput>
    create: XOR<SubjectCreateWithoutWebsitesInput, SubjectUncheckedCreateWithoutWebsitesInput>
  }

  export type SubjectUpdateWithoutWebsitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutWebsitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateWithoutNotesInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutNotesInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutNotesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutNotesInput, SubjectUncheckedCreateWithoutNotesInput>
  }

  export type SubjectUpsertWithoutNotesInput = {
    update: XOR<SubjectUpdateWithoutNotesInput, SubjectUncheckedUpdateWithoutNotesInput>
    create: XOR<SubjectCreateWithoutNotesInput, SubjectUncheckedCreateWithoutNotesInput>
  }

  export type SubjectUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateWithoutGoalsInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutGoalsInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutGoalsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutGoalsInput, SubjectUncheckedCreateWithoutGoalsInput>
  }

  export type SubjectUpsertWithoutGoalsInput = {
    update: XOR<SubjectUpdateWithoutGoalsInput, SubjectUncheckedUpdateWithoutGoalsInput>
    create: XOR<SubjectCreateWithoutGoalsInput, SubjectUncheckedCreateWithoutGoalsInput>
  }

  export type SubjectUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateWithoutReflectionsInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutSubjectsInput
    Practices?: PracticeCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteCreateNestedManyWithoutSubjectInput
    Notes?: NoteCreateNestedManyWithoutSubjectInput
    Goals?: GoalCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutReflectionsInput = {
    id?: string
    title: string
    authorId: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Practices?: PracticeUncheckedCreateNestedManyWithoutSubjectInput
    Websites?: WebsiteUncheckedCreateNestedManyWithoutSubjectInput
    Notes?: NoteUncheckedCreateNestedManyWithoutSubjectInput
    Goals?: GoalUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutReflectionsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutReflectionsInput, SubjectUncheckedCreateWithoutReflectionsInput>
  }

  export type SubjectUpsertWithoutReflectionsInput = {
    update: XOR<SubjectUpdateWithoutReflectionsInput, SubjectUncheckedUpdateWithoutReflectionsInput>
    create: XOR<SubjectCreateWithoutReflectionsInput, SubjectUncheckedCreateWithoutReflectionsInput>
  }

  export type SubjectUpdateWithoutReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSubjectsInput
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectCreateManyAuthorInput = {
    id?: string
    title: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type SubjectUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUpdateManyWithoutSubjectInput
    Websites?: WebsiteUpdateManyWithoutSubjectInput
    Notes?: NoteUpdateManyWithoutSubjectInput
    Goals?: GoalUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Practices?: PracticeUncheckedUpdateManyWithoutSubjectInput
    Websites?: WebsiteUncheckedUpdateManyWithoutSubjectInput
    Notes?: NoteUncheckedUpdateManyWithoutSubjectInput
    Goals?: GoalUncheckedUpdateManyWithoutSubjectInput
    Reflections?: ReflectionUncheckedUpdateManyWithoutSubjectInput
  }

  export type SubjectUncheckedUpdateManyWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeCreateManySubjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quantity?: number | null
    description?: string
  }

  export type WebsiteCreateManySubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    url: string
    summary?: string
  }

  export type NoteCreateManySubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: string
    title?: string
  }

  export type GoalCreateManySubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    estimatedCompletion: Date | string
    description?: string
  }

  export type ReflectionCreateManySubjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    content?: string
  }

  export type PracticeUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeUncheckedUpdateManyWithoutPracticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteUncheckedUpdateManyWithoutWebsitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUncheckedUpdateManyWithoutGoalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    estimatedCompletion?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReflectionUncheckedUpdateManyWithoutReflectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}